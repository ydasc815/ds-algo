https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int getDecimalValue(ListNode* head) {
        vector<int> a; int d = 0;
        ListNode* temp = head;
        while(temp != NULL) {
            a.push_back(temp->val);
            temp = temp->next;
        }
        int i = 0;
        for(int j = a.size() - 1; j>=0; j--) {
            d += pow(2, i)*a[j];
            i++;
        }
        return d;
    }
};

https://leetcode.com/problems/middle-of-the-linked-list/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        int size = 0;
        ListNode* temp = head;
        while(temp != NULL) {
            size++;
            temp = temp->next;
        }
        temp = head;
        int k = 0;
        while(k != size/2) {
            temp = temp->next;
            k++;
        }
        return temp;
    }
};

https://leetcode.com/problems/palindrome-linked-list/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
#define null NULL
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<int> st; int fg = 0;
        ListNode* temp = head;
        while(temp != null) {
            st.push(temp->val);
            temp = temp->next;
        }
        temp = head;
        while(temp != null) {
            if(st.top() != temp->val) {
                fg = 1;
                break;
            } else {
                st.pop();
                temp = temp->next;
            }
        }
        return (fg == 0);
    }
};
